{"remainingRequest":"/home/alberto/Escritorio/vue.js-unit-test-with-jest/Vue.js-unit-test-with-jest/node_modules/babel-loader/lib/index.js!/home/alberto/Escritorio/vue.js-unit-test-with-jest/Vue.js-unit-test-with-jest/node_modules/vuetify-loader/lib/loader.js!/home/alberto/Escritorio/vue.js-unit-test-with-jest/Vue.js-unit-test-with-jest/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/alberto/Escritorio/vue.js-unit-test-with-jest/Vue.js-unit-test-with-jest/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/alberto/Escritorio/vue.js-unit-test-with-jest/Vue.js-unit-test-with-jest/src/components/GChart.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/alberto/Escritorio/vue.js-unit-test-with-jest/Vue.js-unit-test-with-jest/src/components/GChart.vue","mtime":1571835939706},{"path":"/home/alberto/Escritorio/vue.js-unit-test-with-jest/Vue.js-unit-test-with-jest/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/alberto/Escritorio/vue.js-unit-test-with-jest/Vue.js-unit-test-with-jest/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/alberto/Escritorio/vue.js-unit-test-with-jest/Vue.js-unit-test-with-jest/node_modules/vuetify-loader/lib/loader.js","mtime":1549812933000},{"path":"/home/alberto/Escritorio/vue.js-unit-test-with-jest/Vue.js-unit-test-with-jest/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/alberto/Escritorio/vue.js-unit-test-with-jest/Vue.js-unit-test-with-jest/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/alberto/Escritorio/vue.js-unit-test-with-jest/Vue.js-unit-test-with-jest/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/alberto/Escritorio/vue.js-unit-test-with-jest/Vue.js-unit-test-with-jest/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/alberto/Escritorio/vue.js-unit-test-with-jest/Vue.js-unit-test-with-jest/node_modules/vuetify-loader/lib/loader.js","mtime":1549812933000},{"path":"/home/alberto/Escritorio/vue.js-unit-test-with-jest/Vue.js-unit-test-with-jest/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/alberto/Escritorio/vue.js-unit-test-with-jest/Vue.js-unit-test-with-jest/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _toConsumableArray from \"/home/alberto/Escritorio/vue.js-unit-test-with-jest/Vue.js-unit-test-with-jest/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\n//\n//\n//\n//\n//\n//\n//\nimport { GChart } from \"vue-google-charts\";\nexport default {\n  name: \"App\",\n  components: {\n    GChart: GChart\n  },\n  data: function data() {\n    return {\n      chartDataHeader: [\"Año\", \"Ventas\", \"Compras\", \"Esto\", \"Aquello\"],\n      chartDataRows: [[\"2014\", 1000, 400, 200, 45], [\"2015\", 1170, 460, 250, 45], [\"2016\", 660, 1120, 300, 45], [\"2017\", 1030, 540, 350, 45], [\"2017\", 1030, 1400, 350, 405]],\n      updatedChartData: [],\n      chartOptions: {\n        chart: {\n          title: \"Company Performance\",\n          subtitle: \"Sales, Expenses, and Profit: 2014-2017\"\n        }\n      }\n    };\n  },\n  computed: {\n    chartData: function chartData() {\n      return [this.chartDataHeader].concat(_toConsumableArray(this.updatedChartData));\n    }\n  },\n  methods: {\n    updateData: function updateData() {\n      this.updatedChartData = this.chartDataRows.map(function (row) {\n        return row.map(function (item, index) {\n          //   if (index !== 0) {\n          //     const max = item + 1000;\n          //     const min = 0;\n          //     return Math.floor(Math.random() * (max - min)) + min;\n          //   }\n          return item;\n        });\n      });\n    }\n  },\n  created: function created() {\n    this.updateData();\n  }\n};",{"version":3,"sources":["GChart.vue"],"names":[],"mappings":";;;;;;;;AAQA,SAAA,MAAA,QAAA,mBAAA;AACA,eAAA;AACA,EAAA,IAAA,EAAA,KADA;AAEA,EAAA,UAAA,EAAA;AACA,IAAA,MAAA,EAAA;AADA,GAFA;AAKA,EAAA,IALA,kBAKA;AACA,WAAA;AACA,MAAA,eAAA,EAAA,CAAA,KAAA,EAAA,QAAA,EAAA,SAAA,EAAA,MAAA,EAAA,SAAA,CADA;AAEA,MAAA,aAAA,EAAA,CACA,CAAA,MAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,CADA,EAEA,CAAA,MAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,CAFA,EAGA,CAAA,MAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,EAAA,CAHA,EAIA,CAAA,MAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,EAAA,EAAA,CAJA,EAKA,CAAA,MAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,CALA,CAFA;AASA,MAAA,gBAAA,EAAA,EATA;AAUA,MAAA,YAAA,EAAA;AACA,QAAA,KAAA,EAAA;AACA,UAAA,KAAA,EAAA,qBADA;AAEA,UAAA,QAAA,EAAA;AAFA;AADA;AAVA,KAAA;AAiBA,GAvBA;AAwBA,EAAA,QAAA,EAAA;AACA,IAAA,SADA,uBACA;AACA,cAAA,KAAA,eAAA,4BAAA,KAAA,gBAAA;AACA;AAHA,GAxBA;AA6BA,EAAA,OAAA,EAAA;AACA,IAAA,UADA,wBACA;AACA,WAAA,gBAAA,GAAA,KAAA,aAAA,CAAA,GAAA,CAAA,UAAA,GAAA,EAAA;AACA,eAAA,GAAA,CAAA,GAAA,CAAA,UAAA,IAAA,EAAA,KAAA,EAAA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAA,IAAA;AACA,SAPA,CAAA;AAQA,OATA,CAAA;AAUA;AAZA,GA7BA;AA2CA,EAAA,OA3CA,qBA2CA;AACA,SAAA,UAAA;AACA;AA7CA,CAAA","sourcesContent":["<template>\n  <div id=\"app\">\n    <GChart type=\"ColumnChart\" :data=\"chartData\" :options=\"chartOptions\" />\n    <GChart type=\"ColumnChart\" :data=\"chartData\" :options=\"chartOptions\" />\n  </div>\n</template>\n\n<script>\nimport { GChart } from \"vue-google-charts\";\nexport default {\n  name: \"App\",\n  components: {\n    GChart\n  },\n  data() {\n    return {\n      chartDataHeader: [\"Año\", \"Ventas\", \"Compras\", \"Esto\", \"Aquello\"],\n      chartDataRows: [\n        [\"2014\", 1000, 400, 200, 45],\n        [\"2015\", 1170, 460, 250, 45],\n        [\"2016\", 660, 1120, 300, 45],\n        [\"2017\", 1030, 540, 350, 45],\n        [\"2017\", 1030, 1400, 350, 405]\n      ],\n      updatedChartData: [],\n      chartOptions: {\n        chart: {\n          title: \"Company Performance\",\n          subtitle: \"Sales, Expenses, and Profit: 2014-2017\"\n        }\n      }\n    };\n  },\n  computed: {\n    chartData() {\n      return [this.chartDataHeader, ...this.updatedChartData];\n    }\n  },\n  methods: {\n    updateData() {\n      this.updatedChartData = this.chartDataRows.map(row => {\n        return row.map((item, index) => {\n          //   if (index !== 0) {\n          //     const max = item + 1000;\n          //     const min = 0;\n          //     return Math.floor(Math.random() * (max - min)) + min;\n          //   }\n          return item;\n        });\n      });\n    }\n  },\n  created() {\n    this.updateData();\n  }\n};\n</script>"],"sourceRoot":"src/components"}]}