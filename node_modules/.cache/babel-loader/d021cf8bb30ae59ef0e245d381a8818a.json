{"remainingRequest":"/home/alberto/Escritorio/vue.js-unit-test-with-jest/Vue.js-unit-test-with-jest/node_modules/babel-loader/lib/index.js!/home/alberto/Escritorio/vue.js-unit-test-with-jest/Vue.js-unit-test-with-jest/node_modules/vuetify/lib/components/VLazy/VLazy.js","dependencies":[{"path":"/home/alberto/Escritorio/vue.js-unit-test-with-jest/Vue.js-unit-test-with-jest/node_modules/vuetify/lib/components/VLazy/VLazy.js","mtime":499162500000},{"path":"/home/alberto/Escritorio/vue.js-unit-test-with-jest/Vue.js-unit-test-with-jest/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/alberto/Escritorio/vue.js-unit-test-with-jest/Vue.js-unit-test-with-jest/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.number.constructor\";\n// Mixins\nimport Toggleable from \"../../mixins/toggleable\"; // Directives\n\nimport intersect from \"../../directives/intersect\"; // Utilities\n\nimport mixins from \"../../util/mixins\";\nimport { convertToUnit, getSlot } from \"../../util/helpers\";\nexport default mixins(Toggleable).extend({\n  name: 'VLazy',\n  directives: {\n    intersect: intersect\n  },\n  props: {\n    minHeight: [Number, String],\n    options: {\n      type: Object,\n      // For more information on types, navigate to:\n      // https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API\n      default: function _default() {\n        return {\n          root: undefined,\n          rootMargin: undefined,\n          threshold: undefined\n        };\n      }\n    },\n    transition: {\n      type: String,\n      default: 'fade-transition'\n    }\n  },\n  computed: {\n    styles: function styles() {\n      return {\n        minHeight: parseInt(this.minHeight) ? convertToUnit(this.minHeight) : this.minHeight\n      };\n    }\n  },\n  methods: {\n    genContent: function genContent() {\n      if (!this.isActive) return undefined;\n      var slot = getSlot(this);\n      /* istanbul ignore if */\n\n      if (!this.transition) return slot;\n      return this.$createElement('transition', {\n        props: {\n          name: this.transition\n        }\n      }, slot);\n    },\n    onObserve: function onObserve(entries) {\n      if (this.isActive) return;\n      this.isActive = Boolean(entries.find(function (entry) {\n        return entry.isIntersecting;\n      }));\n    }\n  },\n  render: function render(h) {\n    return h('div', {\n      staticClass: 'v-observe',\n      attrs: this.$attrs,\n      directives: [{\n        name: 'intersect',\n        value: {\n          handler: this.onObserve,\n          options: this.options\n        }\n      }],\n      on: this.$listeners,\n      style: this.styles\n    }, [this.genContent()]);\n  }\n});",{"version":3,"sources":["../../../src/components/VLazy/VLazy.ts"],"names":[],"mappings":";;AAAA;AACA,OAAA,UAAA,gC,CAEA;;AACA,OAAA,SAAA,mC,CAEA;;AACA,OAAA,MAAA;AACA,SAAA,aAAA,EAAA,OAAA;AAKA,eAAe,MAAM,CAAN,UAAM,CAAN,CAAA,MAAA,CAA0B;AACvC,EAAA,IAAI,EADmC,OAAA;AAGvC,EAAA,UAAU,EAAE;AAAE,IAAA,SAAA,EAAA;AAAF,GAH2B;AAKvC,EAAA,KAAK,EAAE;AACL,IAAA,SAAS,EAAE,CAAA,MAAA,EADN,MACM,CADN;AAEL,IAAA,OAAO,EAAE;AACP,MAAA,IAAI,EADG,MAAA;AAEP;AACA;AACA,MAAA,OAAO,EAAE;AAAA,eAAO;AACd,UAAA,IAAI,EADU,SAAA;AAEd,UAAA,UAAU,EAFI,SAAA;AAGd,UAAA,SAAS,EAAE;AAHG,SAAP;AAAA;AAJF,KAFJ;AAYL,IAAA,UAAU,EAAE;AACV,MAAA,IAAI,EADM,MAAA;AAEV,MAAA,OAAO,EAAE;AAFC;AAZP,GALgC;AAuBvC,EAAA,QAAQ,EAAE;AACR,IAAA,MADQ,oBACF;AACJ,aAAO;AACL,QAAA,SAAS,EAAE,QAAQ,CAAC,KAAT,SAAQ,CAAR,GAA2B,aAAa,CAAC,KAAzC,SAAwC,CAAxC,GAA2D,KAAK;AADtE,OAAP;AAGD;AALO,GAvB6B;AA+BvC,EAAA,OAAO,EAAE;AACP,IAAA,UADO,wBACG;AACR,UAAI,CAAC,KAAL,QAAA,EAAoB,OAAA,SAAA;AAEpB,UAAM,IAAI,GAAG,OAAO,CAApB,IAAoB,CAApB;AAEA;;AACA,UAAI,CAAC,KAAL,UAAA,EAAsB,OAAA,IAAA;AAEtB,aAAO,KAAA,cAAA,CAAA,YAAA,EAAkC;AACvC,QAAA,KAAK,EAAE;AAAE,UAAA,IAAI,EAAE,KAAK;AAAb;AADgC,OAAlC,EAAP,IAAO,CAAP;AATK,KAAA;AAaP,IAAA,SAbO,qBAaE,OAbF,EAawC;AAC7C,UAAI,KAAJ,QAAA,EAAmB;AAEnB,WAAA,QAAA,GAAgB,OAAO,CAAC,OAAO,CAAP,IAAA,CAAa,UAAA,KAAK;AAAA,eAAI,KAAK,CAAnD,cAA0C;AAAA,OAAlB,CAAD,CAAvB;AACD;AAjBM,GA/B8B;AAmDvC,EAAA,MAnDuC,kBAmDjC,CAnDiC,EAmD9B;AACP,WAAO,CAAC,CAAA,KAAA,EAAQ;AACd,MAAA,WAAW,EADG,WAAA;AAEd,MAAA,KAAK,EAAE,KAFO,MAAA;AAGd,MAAA,UAAU,EAAE,CAAC;AACX,QAAA,IAAI,EADO,WAAA;AAEX,QAAA,KAAK,EAAE;AACL,UAAA,OAAO,EAAE,KADJ,SAAA;AAEL,UAAA,OAAO,EAAE,KAAK;AAFT;AAFI,OAAD,CAHE;AAUd,MAAA,EAAE,EAAE,KAVU,UAAA;AAWd,MAAA,KAAK,EAAE,KAAK;AAXE,KAAR,EAYL,CAAC,KAZJ,UAYI,EAAD,CAZK,CAAR;AAaD;AAjEsC,CAA1B,CAAf","sourcesContent":["// Mixins\nimport Toggleable from '../../mixins/toggleable'\n\n// Directives\nimport intersect from '../../directives/intersect'\n\n// Utilities\nimport mixins from '../../util/mixins'\nimport { convertToUnit, getSlot } from '../../util/helpers'\n\n// Types\nimport { VNode } from 'vue'\n\nexport default mixins(Toggleable).extend({\n  name: 'VLazy',\n\n  directives: { intersect },\n\n  props: {\n    minHeight: [Number, String],\n    options: {\n      type: Object,\n      // For more information on types, navigate to:\n      // https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API\n      default: () => ({\n        root: undefined,\n        rootMargin: undefined,\n        threshold: undefined,\n      }),\n    },\n    transition: {\n      type: String,\n      default: 'fade-transition',\n    },\n  },\n\n  computed: {\n    styles (): object {\n      return {\n        minHeight: parseInt(this.minHeight) ? convertToUnit(this.minHeight) : this.minHeight,\n      }\n    },\n  },\n\n  methods: {\n    genContent () {\n      if (!this.isActive) return undefined\n\n      const slot = getSlot(this)\n\n      /* istanbul ignore if */\n      if (!this.transition) return slot\n\n      return this.$createElement('transition', {\n        props: { name: this.transition },\n      }, slot)\n    },\n    onObserve (entries: IntersectionObserverEntry[]) {\n      if (this.isActive) return\n\n      this.isActive = Boolean(entries.find(entry => entry.isIntersecting))\n    },\n  },\n\n  render (h): VNode {\n    return h('div', {\n      staticClass: 'v-observe',\n      attrs: this.$attrs,\n      directives: [{\n        name: 'intersect',\n        value: {\n          handler: this.onObserve,\n          options: this.options,\n        },\n      }] as any,\n      on: this.$listeners,\n      style: this.styles,\n    }, [this.genContent()])\n  },\n})\n"],"sourceRoot":""}]}