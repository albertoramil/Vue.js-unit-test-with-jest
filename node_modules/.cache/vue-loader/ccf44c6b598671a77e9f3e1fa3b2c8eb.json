{"remainingRequest":"/home/alberto/Escritorio/vue.js-unit-test-with-jest/Vue.js-unit-test-with-jest/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/alberto/Escritorio/vue.js-unit-test-with-jest/Vue.js-unit-test-with-jest/src/components/GChart.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/alberto/Escritorio/vue.js-unit-test-with-jest/Vue.js-unit-test-with-jest/src/components/GChart.vue","mtime":1571829076759},{"path":"/home/alberto/Escritorio/vue.js-unit-test-with-jest/Vue.js-unit-test-with-jest/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/alberto/Escritorio/vue.js-unit-test-with-jest/Vue.js-unit-test-with-jest/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/alberto/Escritorio/vue.js-unit-test-with-jest/Vue.js-unit-test-with-jest/node_modules/vuetify-loader/lib/loader.js","mtime":1549812933000},{"path":"/home/alberto/Escritorio/vue.js-unit-test-with-jest/Vue.js-unit-test-with-jest/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/alberto/Escritorio/vue.js-unit-test-with-jest/Vue.js-unit-test-with-jest/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { GChart } from \"vue-google-charts\";\nexport default {\n  name: \"App\",\n  components: {\n    GChart\n  },\n  data () {\n    return {\n      chartDataHeader: ['Year', 'Sales', 'Expenses', 'Profit'],\n      chartDataRows: [\n        ['2014', 1000, 400, 200],\n        ['2015', 1170, 460, 250],\n        ['2016', 660, 1120, 300],\n        ['2017', 1030, 540, 350],\n                ['2017', 1030, 540, 350]\n\n      ],\n      updatedChartData: [],\n      chartOptions: {\n        chart: {\n          title: 'Company Performance',\n          subtitle: 'Sales, Expenses, and Profit: 2014-2017'\n        }\n      }\n    }\n  },\n  computed: {\n    chartData () {\n      return [ this.chartDataHeader, ...this.updatedChartData ]\n    }\n  },\n  methods: {\n    updateData () {\n      this.updatedChartData = this.chartDataRows\n        .map(row => {\n          return row.map((item, index) => {\n            if (index !== 0) {\n              const max = item + 1000\n              const min = 0\n              return Math.floor(Math.random() * (max - min)) + min\n            }\n            return item\n          })\n        })\n    }\n  },\n  created () {\n    this.updateData()\n  }\n};\n",{"version":3,"sources":["GChart.vue"],"names":[],"mappings":";;;;;;;;;;;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"GChart.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div id=\"app\">\n    <GChart\n      type=\"ColumnChart\"\n      :data=\"chartData\"\n      :options=\"chartOptions\"\n    />\n    <button @click=\"updateData\">Click to change data</button>  \n  </div>\n</template>\n\n<script>\nimport { GChart } from \"vue-google-charts\";\nexport default {\n  name: \"App\",\n  components: {\n    GChart\n  },\n  data () {\n    return {\n      chartDataHeader: ['Year', 'Sales', 'Expenses', 'Profit'],\n      chartDataRows: [\n        ['2014', 1000, 400, 200],\n        ['2015', 1170, 460, 250],\n        ['2016', 660, 1120, 300],\n        ['2017', 1030, 540, 350],\n                ['2017', 1030, 540, 350]\n\n      ],\n      updatedChartData: [],\n      chartOptions: {\n        chart: {\n          title: 'Company Performance',\n          subtitle: 'Sales, Expenses, and Profit: 2014-2017'\n        }\n      }\n    }\n  },\n  computed: {\n    chartData () {\n      return [ this.chartDataHeader, ...this.updatedChartData ]\n    }\n  },\n  methods: {\n    updateData () {\n      this.updatedChartData = this.chartDataRows\n        .map(row => {\n          return row.map((item, index) => {\n            if (index !== 0) {\n              const max = item + 1000\n              const min = 0\n              return Math.floor(Math.random() * (max - min)) + min\n            }\n            return item\n          })\n        })\n    }\n  },\n  created () {\n    this.updateData()\n  }\n};\n</script>"]}]}