{"remainingRequest":"/home/alberto/Escritorio/vue.js-unit-test-with-jest/Vue.js-unit-test-with-jest/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/alberto/Escritorio/vue.js-unit-test-with-jest/Vue.js-unit-test-with-jest/src/components/GChart.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/alberto/Escritorio/vue.js-unit-test-with-jest/Vue.js-unit-test-with-jest/src/components/GChart.vue","mtime":1571824141418},{"path":"/home/alberto/Escritorio/vue.js-unit-test-with-jest/Vue.js-unit-test-with-jest/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/alberto/Escritorio/vue.js-unit-test-with-jest/Vue.js-unit-test-with-jest/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/home/alberto/Escritorio/vue.js-unit-test-with-jest/Vue.js-unit-test-with-jest/node_modules/vuetify-loader/lib/loader.js","mtime":1549812933000},{"path":"/home/alberto/Escritorio/vue.js-unit-test-with-jest/Vue.js-unit-test-with-jest/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/alberto/Escritorio/vue.js-unit-test-with-jest/Vue.js-unit-test-with-jest/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n\nimport loadGoogleCharts from '../lib/google-charts-loader'\nimport debounce from 'debounce'\nlet chartsLib = null\nexport default {\n  name: 'GChart',\n\n  props: {\n    type: {\n      type: String\n    },\n    data: {\n      type: [Array, Object],\n      default: () => []\n    },\n    options: {\n      type: Object,\n      default: () => ({})\n    },\n    version: {\n      type: String,\n      default: 'current'\n    },\n    settings: {\n      type: Object,\n      default: () => ({\n        packages: ['corechart', 'table']\n      })\n    },\n    events: {\n      type: Object\n    },\n    createChart: {\n      type: Function\n    },\n    resizeDebounce: {\n      type: Number,\n      default: 200\n    }\n  },\n\n  data () {\n    return {\n      chartObject: null\n    }\n  },\n\n  watch: {\n    data: {\n      deep: true,\n      handler () {\n        this.drawChart()\n      }\n    },\n    options: {\n      deep: true,\n      handler () {\n        this.drawChart()\n      }\n    },\n    type (value) {\n      this.createChartObject()\n      this.drawChart()\n    }\n  },\n\n  mounted () {\n    loadGoogleCharts(this.version, this.settings).then(api => {\n      chartsLib = api\n      const chart = this.createChartObject()\n      this.$emit('ready', chart, api)\n      this.drawChart()\n    })\n    if (this.resizeDebounce > 0) window.addEventListener('resize', debounce(this.drawChart, this.resizeDebounce))\n  },\n\n  beforeDestroy () {\n    if (this.chartObject) {\n      this.chartObject.clearChart()\n    }\n  },\n\n  methods: {\n    drawChart () {\n      if (!chartsLib || !this.chartObject) return\n      const data = this.getValidChartData()\n      if (data) this.chartObject.draw(data, this.options)\n    },\n\n    getValidChartData () {\n      if (this.data instanceof chartsLib.visualization.DataTable) return this.data\n      if (this.data instanceof chartsLib.visualization.DataView) return this.data\n      if (Array.isArray(this.data)) return chartsLib.visualization.arrayToDataTable(this.data)\n      if (this.data !== null && typeof this.data === 'object') return new chartsLib.visualization.DataTable(this.data)\n      return null\n    },\n\n    createChartObject () {\n      const createChart = (el, google, type) => {\n        if (!type) throw new Error('please, provide chart type property')\n        return new google.visualization[type](el)\n      }\n      const fn = this.createChart || createChart\n      this.chartObject = fn(this.$refs.chart, chartsLib, this.type)\n      this.attachListeners()\n      return this.chartObject\n    },\n\n    attachListeners () {\n      if (!this.events) return\n      Object.entries(this.events).forEach(([event, listener]) => {\n        chartsLib.visualization.events.addListener(this.chartObject, event, listener)\n      })\n    }\n  }\n}\n\n",{"version":3,"sources":["GChart.vue"],"names":[],"mappings":";;;;;AAKA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"GChart.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div ref=\"chart\"></div>\n</template>\n\n<script>\nimport loadGoogleCharts from '../lib/google-charts-loader'\nimport debounce from 'debounce'\nlet chartsLib = null\nexport default {\n  name: 'GChart',\n\n  props: {\n    type: {\n      type: String\n    },\n    data: {\n      type: [Array, Object],\n      default: () => []\n    },\n    options: {\n      type: Object,\n      default: () => ({})\n    },\n    version: {\n      type: String,\n      default: 'current'\n    },\n    settings: {\n      type: Object,\n      default: () => ({\n        packages: ['corechart', 'table']\n      })\n    },\n    events: {\n      type: Object\n    },\n    createChart: {\n      type: Function\n    },\n    resizeDebounce: {\n      type: Number,\n      default: 200\n    }\n  },\n\n  data () {\n    return {\n      chartObject: null\n    }\n  },\n\n  watch: {\n    data: {\n      deep: true,\n      handler () {\n        this.drawChart()\n      }\n    },\n    options: {\n      deep: true,\n      handler () {\n        this.drawChart()\n      }\n    },\n    type (value) {\n      this.createChartObject()\n      this.drawChart()\n    }\n  },\n\n  mounted () {\n    loadGoogleCharts(this.version, this.settings).then(api => {\n      chartsLib = api\n      const chart = this.createChartObject()\n      this.$emit('ready', chart, api)\n      this.drawChart()\n    })\n    if (this.resizeDebounce > 0) window.addEventListener('resize', debounce(this.drawChart, this.resizeDebounce))\n  },\n\n  beforeDestroy () {\n    if (this.chartObject) {\n      this.chartObject.clearChart()\n    }\n  },\n\n  methods: {\n    drawChart () {\n      if (!chartsLib || !this.chartObject) return\n      const data = this.getValidChartData()\n      if (data) this.chartObject.draw(data, this.options)\n    },\n\n    getValidChartData () {\n      if (this.data instanceof chartsLib.visualization.DataTable) return this.data\n      if (this.data instanceof chartsLib.visualization.DataView) return this.data\n      if (Array.isArray(this.data)) return chartsLib.visualization.arrayToDataTable(this.data)\n      if (this.data !== null && typeof this.data === 'object') return new chartsLib.visualization.DataTable(this.data)\n      return null\n    },\n\n    createChartObject () {\n      const createChart = (el, google, type) => {\n        if (!type) throw new Error('please, provide chart type property')\n        return new google.visualization[type](el)\n      }\n      const fn = this.createChart || createChart\n      this.chartObject = fn(this.$refs.chart, chartsLib, this.type)\n      this.attachListeners()\n      return this.chartObject\n    },\n\n    attachListeners () {\n      if (!this.events) return\n      Object.entries(this.events).forEach(([event, listener]) => {\n        chartsLib.visualization.events.addListener(this.chartObject, event, listener)\n      })\n    }\n  }\n}\n\n</script>\n"]}]}